const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Company = require('../models/Company');
const authService = require('../services/authService');

const router = express.Router();

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –ë–î
const mockUsers = [
  {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    password: '$2a$10$example.hash.for.password123', // hash –¥–ª—è "password123"
    position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
    company: {
      id: 1,
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è',
      subscription_type: 'premium'
    }
  }
];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î
const isDatabaseAvailable = async () => {
  try {
    const { testConnection } = require('../config/database');
    return await testConnection();
  } catch (error) {
    return false;
  }
};

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                 user:
 *                   $ref: '#/components/schemas/User'
 *       401:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å
 */
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      return res.status(400).json({
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    const dbAvailable = await isDatabaseAvailable();
    
    if (!dbAvailable && process.env.NODE_ENV !== 'production') {
      console.log('üß™ Mock-—Ä–µ–∂–∏–º: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // Mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (email === 'test@example.com' && password === 'password123') {
        const mockUser = mockUsers[0];
        const token = jwt.sign(
          { 
            userId: mockUser.id, 
            email: mockUser.email,
            companyId: mockUser.company.id 
          },
          process.env.JWT_SECRET || 'dev-secret',
          { expiresIn: '7d' }
        );

        return res.json({
          token,
          user: {
            id: mockUser.id,
            name: mockUser.name,
            email: mockUser.email,
            position: mockUser.position,
            company: mockUser.company
          }
        });
      } else {
        return res.status(401).json({
          error: 'Mock-—Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ test@example.com / password123'
        });
      }
    }

    // –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ë–î
    const user = await User.findOne({
      where: { email },
      include: [Company]
    });

    if (!user) {
      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email,
        companyId: user.companyId 
      },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        position: user.position,
        company: user.Company
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - email
 *               - password
 *               - companyName
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *               password:
 *                 type: string
 *                 minLength: 6
 *               companyName:
 *                 type: string
 *     responses:
 *       201:
 *         description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
router.post('/register', async (req, res) => {
  try {
    const dbAvailable = await isDatabaseAvailable();
    
    if (!dbAvailable && process.env.NODE_ENV !== 'production') {
      return res.status(503).json({
        error: 'Mock-—Ä–µ–∂–∏–º: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ë–î',
        suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test@example.com / password123 –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    const result = await authService.register(req.body);
    res.status(201).json(result);
  } catch (error) {
    console.error('Registration error:', error);
    
    if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      return res.status(400).json({ error: error.message });
    }
    
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * @swagger
 * /api/auth/me:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 *     tags: [Auth]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 */
router.get('/me', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'dev-secret');
    
    const dbAvailable = await isDatabaseAvailable();
    
    if (!dbAvailable && process.env.NODE_ENV !== 'production') {
      // Mock —Ä–µ–∂–∏–º
      const mockUser = mockUsers.find(u => u.id === decoded.userId);
      if (mockUser) {
        return res.json({
          id: mockUser.id,
          name: mockUser.name,
          email: mockUser.email,
          position: mockUser.position,
          company: mockUser.company
        });
      }
    }

    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –ë–î
    const user = await User.findByPk(decoded.userId, {
      include: [Company]
    });

    if (!user) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      id: user.id,
      name: user.name,
      email: user.email,
      position: user.position,
      company: user.Company
    });

  } catch (error) {
    console.error('Auth check error:', error);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

module.exports = router; 