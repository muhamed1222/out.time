const { Pool } = require('pg');

if (!process.env.DATABASE_URL) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// Log database configuration (without sensitive data)
console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
const dbUrl = new URL(process.env.DATABASE_URL);
console.log(`   –•–æ—Å—Ç: ${dbUrl.hostname}`);
console.log(`   –ü–æ—Ä—Ç: ${dbUrl.port}`);
console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbUrl.pathname.slice(1)}`);
console.log(`   SSL: enabled`);

// Connection pool configuration
const poolConfig = {
  connectionString: process.env.DATABASE_URL,
  max: 20,                    // Maximum number of connections
  min: 5,                     // Minimum number of connections
  idleTimeoutMillis: 30000,   // Close idle connections after 30 seconds
  connectionTimeoutMillis: 5000, // Increased timeout for connection
  acquireTimeoutMillis: 60000,   // Timeout for acquiring connection
  ssl: {
    rejectUnauthorized: false // Required for Supabase
  }
};

const pool = new Pool(poolConfig);

// Test database connection
const testConnection = async () => {
  try {
    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const client = await pool.connect();
    
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã...');
    const result = await client.query('SELECT NOW()');
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
    console.log('üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].now);
    
    client.release();
    return true;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
    if (err.code) {
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
    }
    if (err.stack) {
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', err.stack);
    }
    
    console.error('\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.error('1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL');
    console.error('2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.error('3. –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    console.error('4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL');
    console.error('5. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    return false;
  }
};

// Connection health check
pool.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ PostgreSQL:', err.message);
  if (err.code === 'PROTOCOL_CONNECTION_LOST') {
    console.error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—è–Ω–æ');
  } else if (err.code === 'ER_CON_COUNT_ERROR') {
    console.error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
  } else if (err.code === 'ECONNREFUSED') {
    console.error('–í –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–∞–Ω–æ');
  } else {
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–ª–∞:', err);
    if (err.stack) {
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', err.stack);
    }
  }
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  try {
    await pool.end();
    console.log('‚úÖ –ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:', err.message);
    process.exit(1);
  }
});

// Export pool and test function
module.exports = { pool, testConnection }; 