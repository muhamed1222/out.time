import React, { useState } from 'react';
import { 
  Button, 
  Card, 
  CardHeader, 
  CardTitle, 
  CardContent,
  StatsCard,
  DataTable,
  LoadingSkeleton,
  Badge,
  Input,
  Toast,
  Tooltip,
  Breadcrumbs,
  ThemeToggle,
  EmptyState,
  statsColorSchemes,
  statsIcons
} from '../components/ui';
import api from '../services/api';

const ComponentsTest = () => {
  const [apiStatus, setApiStatus] = useState(null);
  const [testing, setTesting] = useState(false);
  const [apiDetails, setApiDetails] = useState(null);

  const testApiConnection = async () => {
    setTesting(true);
    setApiStatus(null);
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º health check endpoint
      const result = await api.healthCheck();
      
      setApiStatus({
        status: result.status,
        data: result.data,
        error: result.error,
        statusCode: result.statusCode,
        baseURL: result.baseURL,
        currentHost: result.currentHost || window.location.hostname,
        timestamp: new Date().toISOString()
      });
      
      setApiDetails({
        currentDomain: window.location.hostname,
        apiUrl: api.defaults.baseURL,
        protocol: window.location.protocol,
        isDev: import.meta.env.DEV
      });
      
    } catch (error) {
      setApiStatus({
        status: 'error',
        error: error.message,
        baseURL: api.defaults.baseURL,
        currentHost: window.location.hostname,
        timestamp: new Date().toISOString()
      });
    } finally {
      setTesting(false);
    }
  };

  const formatApiStatus = (status) => {
    switch (status?.status) {
      case 'ok':
        return { variant: 'success', text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' };
      case 'error':
        return { variant: 'destructive', text: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' };
      default:
        return { variant: 'secondary', text: '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ' };
    }
  };

  const sampleData = [
    { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', status: 'active' },
    { id: 2, name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', position: '–î–∏–∑–∞–π–Ω–µ—Ä', status: 'inactive' },
    { id: 3, name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤', position: '–ú–µ–Ω–µ–¥–∂–µ—Ä', status: 'active' },
  ];

  const columns = [
    { key: 'name', title: '–ò–º—è', sortable: true },
    { key: 'position', title: '–î–æ–ª–∂–Ω–æ—Å—Ç—å' },
    { 
      key: 'status', 
      title: '–°—Ç–∞—Ç—É—Å',
      render: (value) => (
        <Badge variant={value === 'active' ? 'success' : 'secondary'}>
          {value === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        </Badge>
      )
    },
  ];

  const badgeStatus = formatApiStatus(apiStatus);

  return (
    <div className="space-content">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            <ThemeToggle />
          </CardTitle>
        </CardHeader>
      </Card>

      {/* API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <Card>
        <CardHeader>
          <CardTitle>üîå –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center gap-4">
              <Button 
                onClick={testApiConnection} 
                disabled={testing}
                variant="primary"
              >
                {testing ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
              </Button>
              
              {apiStatus && (
                <Badge variant={badgeStatus.variant}>
                  {badgeStatus.text}
                </Badge>
              )}
            </div>

            {apiDetails && (
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                <h4 className="font-semibold mb-2">–î–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>–¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: <code>{apiDetails.currentDomain}</code></div>
                  <div>API URL: <code>{apiDetails.apiUrl}</code></div>
                  <div>–ü—Ä–æ—Ç–æ–∫–æ–ª: <code>{apiDetails.protocol}</code></div>
                  <div>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: <code>{apiDetails.isDev ? '–¥–∞' : '–Ω–µ—Ç'}</code></div>
                </div>
              </div>
            )}

            {apiStatus && (
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                <h4 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</h4>
                <pre className="text-sm overflow-auto">
                  {JSON.stringify(apiStatus, null, 2)}
                </pre>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard
          icon={statsIcons.users}
          title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
          value="42"
          color={statsColorSchemes.success}
          trend={12}
        />
        <StatsCard
          icon={statsIcons.reports}
          title="–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
          value="18"
          color={statsColorSchemes.blue}
          trend={-5}
        />
        <StatsCard
          icon={statsIcons.clock}
          title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è"
          value="8.5—á"
          color={statsColorSchemes.cyan}
          trend={8}
        />
        <StatsCard
          icon={statsIcons.absent}
          title="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
          value="3"
          color={statsColorSchemes.warning}
          trend={0}
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>–ö–Ω–æ–ø–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-4">
            <Button variant="primary">Primary</Button>
            <Button variant="secondary">Secondary</Button>
            <Button variant="outline">Outline</Button>
            <Button variant="ghost">Ghost</Button>
            <Button variant="destructive">Destructive</Button>
          </div>
        </CardContent>
      </Card>

      {/* –ë–µ–π–¥–∂–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>–ë–µ–π–¥–∂–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-4">
            <Badge variant="default">Default</Badge>
            <Badge variant="success">Success</Badge>
            <Badge variant="warning">Warning</Badge>
            <Badge variant="destructive">Error</Badge>
            <Badge variant="secondary">Secondary</Badge>
            <Badge variant="outline">Outline</Badge>
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–ª—è –≤–≤–æ–¥–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4 max-w-md">
            <Input 
              label="–û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
            />
            <Input 
              label="–° –æ—à–∏–±–∫–æ–π"
              placeholder="–ü–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π"
              error="–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
            />
            <Input 
              label="–° –∏–∫–æ–Ω–∫–æ–π"
              placeholder="–ü–æ–∏—Å–∫..."
              icon="üîç"
            />
          </div>
        </CardContent>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö</CardTitle>
        </CardHeader>
        <CardContent>
          <DataTable
            data={sampleData}
            columns={columns}
            searchable
            sortable
            itemsPerPage={5}
          />
        </CardContent>
      </Card>

      {/* Empty State */}
      <Card>
        <CardHeader>
          <CardTitle>Empty State</CardTitle>
        </CardHeader>
        <CardContent>
          <EmptyState
            title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            description="–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è"
            icon="üìä"
            action={{
              label: "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
              onClick: () => alert('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!')
            }}
          />
        </CardContent>
      </Card>

      {/* –°–∫–µ–ª–µ—Ç–æ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>–°–∫–µ–ª–µ—Ç–æ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <LoadingSkeleton type="stats" />
            <LoadingSkeleton type="list" items={3} />
            <LoadingSkeleton type="card" />
          </div>
        </CardContent>
      </Card>

      {/* Tooltips */}
      <Card>
        <CardHeader>
          <CardTitle>Tooltips</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Tooltip content="Tooltip —Å–≤–µ—Ä—Ö—É" position="top">
              <Button variant="outline">–°–≤–µ—Ä—Ö—É</Button>
            </Tooltip>
            <Tooltip content="Tooltip —Å–Ω–∏–∑—É" position="bottom">
              <Button variant="outline">–°–Ω–∏–∑—É</Button>
            </Tooltip>
            <Tooltip content="Tooltip —Å–ª–µ–≤–∞" position="left">
              <Button variant="outline">–°–ª–µ–≤–∞</Button>
            </Tooltip>
            <Tooltip content="Tooltip —Å–ø—Ä–∞–≤–∞" position="right">
              <Button variant="outline">–°–ø—Ä–∞–≤–∞</Button>
            </Tooltip>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ComponentsTest; 