import React, { useState } from 'react';
import { Button, Card, CardHeader, CardTitle, CardContent, Badge } from './ui';

const ApiTest = () => {
  const [testResults, setTestResults] = useState(null);
  const [testing, setTesting] = useState(false);

  const performDiagnostics = async () => {
    setTesting(true);
    setTestResults(null);

    const results = {
      timestamp: new Date().toISOString(),
      currentHost: window.location.hostname,
      currentProtocol: window.location.protocol,
      isDevelopment: import.meta.env.DEV,
      tests: []
    };

    // –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API URL
    const apiUrl = getApiUrl();
    results.apiUrl = apiUrl;
    results.tests.push({
      name: 'API URL –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      status: 'success',
      details: `–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: ${apiUrl}`
    });

    // –¢–µ—Å—Ç 2: Health Check
    try {
      console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', apiUrl);
      console.log('Health URL:', `${apiUrl}/public/health`);
      
      const response = await fetch(`${apiUrl}/public/health`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        mode: 'cors'
      });

      if (response.ok) {
        const data = await response.json();
        results.tests.push({
          name: 'Health Check',
          status: 'success',
          details: `HTTP ${response.status}: ${JSON.stringify(data)}`
        });
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
      results.tests.push({
        name: 'Health Check',
        status: 'error',
        details: error.message,
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        }
      });
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    try {
      const corsResponse = await fetch(`${apiUrl}/public/health`, {
        method: 'OPTIONS'
      });
      
      results.tests.push({
        name: 'CORS Preflight',
        status: corsResponse.ok ? 'success' : 'warning',
        details: `HTTP ${corsResponse.status}, Headers: ${JSON.stringify(Object.fromEntries(corsResponse.headers))}`
      });
    } catch (error) {
      results.tests.push({
        name: 'CORS Preflight',
        status: 'error',
        details: error.message
      });
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    try {
      const networkTest = await fetch('https://httpbin.org/status/200', {
        method: 'GET',
        mode: 'cors'
      });
      
      results.tests.push({
        name: '–¢–µ—Å—Ç —Å–µ—Ç–∏',
        status: networkTest.ok ? 'success' : 'warning',
        details: `–í–Ω–µ—à–Ω–∏–π API –¥–æ—Å—Ç—É–ø–µ–Ω: HTTP ${networkTest.status}`
      });
    } catch (error) {
      results.tests.push({
        name: '–¢–µ—Å—Ç —Å–µ—Ç–∏',
        status: 'error',
        details: `–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é: ${error.message}`
      });
    }

    setTestResults(results);
    setTesting(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è API URL (–∫–æ–ø–∏—è –∏–∑ api.js)
  const getApiUrl = () => {
    const currentHost = window.location.hostname;
    
    if (import.meta.env.DEV || currentHost === 'localhost' || currentHost === '127.0.0.1') {
      return 'http://localhost:3000/api';
    }
    
    if (currentHost === 'outtime.outcasts.dev') {
      return 'https://outtime.outcasts.dev/api';
    }
    
    if (import.meta.env.VITE_API_URL) {
      return import.meta.env.VITE_API_URL;
    }
    
    return `${window.location.protocol}//${window.location.host}/api`;
  };

  const getStatusBadge = (status) => {
    switch (status) {
      case 'success':
        return <Badge variant="success">‚úÖ –£—Å–ø–µ—à–Ω–æ</Badge>;
      case 'warning':
        return <Badge variant="warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</Badge>;
      case 'error':
        return <Badge variant="destructive">‚ùå –û—à–∏–±–∫–∞</Badge>;
      default:
        return <Badge variant="secondary">‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            <Button 
              onClick={performDiagnostics} 
              disabled={testing}
              variant="primary"
            >
              {testing ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'}
            </Button>
          </CardTitle>
        </CardHeader>
        
        {testResults && (
          <CardContent>
            <div className="space-y-4">
              {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                <h4 className="font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ:</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>–•–æ—Å—Ç: <code>{testResults.currentHost}</code></div>
                  <div>–ü—Ä–æ—Ç–æ–∫–æ–ª: <code>{testResults.currentProtocol}</code></div>
                  <div>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: <code>{testResults.isDevelopment ? '–¥–∞' : '–Ω–µ—Ç'}</code></div>
                  <div>API URL: <code>{testResults.apiUrl}</code></div>
                </div>
                <div className="text-xs text-gray-500 mt-2">
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {new Date(testResults.timestamp).toLocaleString('ru-RU')}
                </div>
              </div>

              {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
              <div className="space-y-3">
                <h4 className="font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h4>
                {testResults.tests.map((test, index) => (
                  <div key={index} className="border rounded-lg p-3">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium">{test.name}</span>
                      {getStatusBadge(test.status)}
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      {test.details}
                    </div>
                    {test.error && (
                      <details className="mt-2">
                        <summary className="text-xs text-red-600 cursor-pointer">
                          –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
                        </summary>
                        <pre className="text-xs bg-red-50 dark:bg-red-900/20 p-2 rounded mt-1 overflow-auto">
                          {JSON.stringify(test.error, null, 2)}
                        </pre>
                      </details>
                    )}
                  </div>
                ))}
              </div>

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                <h4 className="font-semibold mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:</h4>
                <div className="text-sm space-y-1">
                  {testResults.tests.some(t => t.status === 'error' && t.name === 'Health Check') && (
                    <div>
                      <strong>üîß Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω:</strong>
                      <ol className="list-decimal list-inside ml-4 mt-1">
                        <li>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É: <code>ssh your-username@outtime.outcasts.dev</code></li>
                        <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É: <code>cd /var/www/outtime.outcasts.dev/backend</code></li>
                        <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ: <code>./start-production.sh</code></li>
                        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: <code>curl http://localhost:3000/api/public/health</code></li>
                      </ol>
                    </div>
                  )}
                  
                  {testResults.tests.some(t => t.status === 'error' && t.name === 'CORS Preflight') && (
                    <div>
                      <strong>üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å CORS:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
                    </div>
                  )}
                  
                  {testResults.tests.some(t => t.status === 'error' && t.name === '–¢–µ—Å—Ç —Å–µ—Ç–∏') && (
                    <div>
                      <strong>üì° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞.
                    </div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
};

export default ApiTest; 